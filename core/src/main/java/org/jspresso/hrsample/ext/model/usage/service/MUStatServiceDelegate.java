package org.jspresso.hrsample.ext.model.usage.service;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.sql.DataSource;

import org.jspresso.framework.model.component.service.IComponentService;
import org.jspresso.framework.model.entity.IEntityFactory;
import org.jspresso.hrsample.ext.model.usage.MUItem;
import org.jspresso.hrsample.ext.model.usage.MUModule;
import org.jspresso.hrsample.ext.model.usage.MUStat;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowCallbackHandler;

/**
 * Generated by Jspresso Developer Studio
 */
public class MUStatServiceDelegate implements IComponentService {

  private JdbcTemplate jdbcTemplate;
  private IEntityFactory entityFactory;
  
  private static final String SQL_COUNT_BASE = 
      "SELECT COUNT(DISTINCT ACCESS_BY), COUNT(*) " + 
      "  FROM MODULE_USAGE " + 
      " WHERE ACCESS_DATE > ?";
  
  private static final String SQL_COUNT_USERS_PER_MODULES = 
      "SELECT MODULE_ID, COUNT(DISTINCT ACCESS_BY) " + 
      "FROM MODULE_USAGE " + 
      "WHERE ACCESS_DATE > ? " + 
      "GROUP BY MODULE_ID";
  
  private static final String SQL_COUNT_ACCESS_PER_MODULES = 
      "SELECT MODULE_ID, COUNT(*) " + 
      "  FROM MODULE_USAGE " + 
      " WHERE ACCESS_DATE > ?" + 
      " GROUP BY MODULE_ID";  
  
  /**
   * Configures the datasource .
   * @param dataSource
   */
  public void setDataSource(DataSource dataSource) {
    jdbcTemplate = new JdbcTemplate(dataSource);
  }
  
  /**
   * set the entityfactory to use
   * @param entityFactory
   */
  public void setEntityFactory(IEntityFactory entityFactory) {
    this.entityFactory = entityFactory;
  }
  
  /**
   * refresh data using datasource
   */
  public void refresh(final MUStat muStat) {
    
    // global counters
    Object[] restrictionsValues = new Object[] {getStartDate(muStat)};
    jdbcTemplate.query(SQL_COUNT_BASE, restrictionsValues, 
        new RowCallbackHandler() {
          @Override
          public void processRow(ResultSet rs) throws SQLException {
            muStat.setUsersCount(rs.getInt(1));
            muStat.setAccessCount(rs.getInt(2));
          }
        });
    
    // users per modules
    final ArrayList<MUItem> items = new ArrayList<MUItem>();
    jdbcTemplate.query(SQL_COUNT_USERS_PER_MODULES, restrictionsValues, 
        new RowCallbackHandler() {
          @Override
          public void processRow(ResultSet rs) throws SQLException {
            items.add(getItem(muStat, rs.getString(1), rs.getInt(2)));;
          }
        });
    muStat.setUsersPerModule(items);
    
    // access per modules
    items.clear();
    jdbcTemplate.query(SQL_COUNT_ACCESS_PER_MODULES, restrictionsValues, 
        new RowCallbackHandler() {
          @Override
          public void processRow(ResultSet rs) throws SQLException {
            items.add(getItem(muStat, rs.getString(1), rs.getInt(2)));;
          }
        });
    muStat.setAccessPerModule(items);
  }

  protected MUItem getItem(MUStat muStat, String moduleId, int count) {
    MUModule module = muStat.getModule(moduleId);
    String label = module!=null ? module.getLabel() : moduleId;
    
    MUItem item = entityFactory.createComponentInstance(MUItem.class);
    item.setCount(count);
    item.setLabel(label);
    
    return item;
  }

  private Date getStartDate(MUStat muStat) {
    int delta = 0;
    if (MUStat.PERIOD_DAY.equals(muStat.getPeriod())) {
      delta = -1;
    }
    else if (MUStat.PERIOD_WEEK.equals(muStat.getPeriod())) {
      delta = -7;
    }
    else if (MUStat.PERIOD_MONTH.equals(muStat.getPeriod())) {
      delta = -30;
    }
    else {
      delta = -365;
    }
    
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.DAY_OF_YEAR, delta);

    return cal.getTime();
  }

  /**
   * get module from module id
   * @return module
   */
  public MUModule getModule(MUStat muStat, String moduleId) {
    for (MUModule m : muStat.getAllModules()) {
      if (moduleId.equals(m.getModuleId())) {
        return m;
      }
    }
    return null;
  }
  


}